{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleChange","e","setState","inputContent","target","value","addItem","newItem","state","nextId","newList","listToDo","btnCmpltUndo","deleteItem","id","updatedList","filter","el","completeItem","i","length","nbrClick","myClass","completed","className","type","name","placeholder","this","onChange","onClick","map","key","content","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQA8GeA,G,kBA3GX,aAAe,IAAD,8BACV,+CAOJC,aAAa,SAACC,GACV,EAAKC,SAAS,CACVC,aAAcF,EAAEG,OAAOC,SAVjB,EAadC,QAAU,WACR,IAAIC,EAAQ,CAAE,GAAK,EAAKC,MAAMC,OAChB,QAAU,EAAKD,MAAML,aACrB,QAAU,OACV,SAAW,EACX,UAAY,YAEtBO,EAAQ,GAAD,mBAAK,EAAKF,MAAMG,UAAhB,CAAyBJ,IAEF,KAA1B,EAAKC,MAAML,cACT,EAAKD,SAAS,CACdO,OAAQ,EAAKD,MAAMC,OAAO,EAC1BE,SAASD,EACTP,aAAa,GACbS,aAAa,cA3BX,EA8BhBC,WAAa,SAACC,GACV,IAAMC,EAAY,EAAKP,MAAMG,SAASK,QAAQ,SAACC,GAC3C,OAAOA,EAAGH,KAAKA,KAEnB,EAAKZ,SAAS,CACVS,SAASI,KAnCD,EAsChBG,aAAe,SAACJ,GACZ,IAAI,IAAIK,EAAE,EAAEA,EAAE,EAAKX,MAAMG,SAASS,OAAOD,IACrC,EAAKX,MAAMG,SAASQ,GAAGL,KAAKA,IAChC,EAAKN,MAAMG,SAASQ,GAAGE,SAAS,EAAKb,MAAMG,SAASQ,GAAGE,SAAS,EAChE,EAAKnB,SAAS,CACZS,SAAS,EAAKH,MAAMG,WAEf,EAAKH,MAAMG,SAASQ,GAAGE,SAAS,GAAG,GACpC,EAAKb,MAAMG,SAASQ,GAAGG,QAAQ,mBAC/B,EAAKd,MAAMG,SAASQ,GAAGI,UAAU,OACjC,EAAKrB,SAAS,CACZS,SAAS,EAAKH,MAAMG,aAGpB,EAAKH,MAAMG,SAASQ,GAAGG,QAAQ,OAC/B,EAAKd,MAAMG,SAASQ,GAAGI,UAAU,WACjC,EAAKrB,SAAS,CACZS,SAAS,EAAKH,MAAMG,cArD5B,EAAKH,MAAQ,CACTL,aAAc,GACdQ,SAAS,GACTF,OAAO,GALD,E,sEA6DJ,IAAD,OAEL,OACI,yBAAKe,UAAU,OACX,6BAASA,UAAU,kBACf,yBAAKA,UAAU,iBACX,0CACA,4CACA,yBAAKA,UAAU,kBACX,2BAAQC,KAAK,OACLC,KAAK,YACLZ,GAAG,kBACHa,YAAY,iBACZtB,MAAOuB,KAAKpB,MAAML,aAClB0B,SAAU,SAAC5B,GAAD,OAAK,EAAKD,aAAaC,MACvC,6BACF,2BAAOwB,KAAK,SAASpB,MAAM,MAAMS,GAAG,UAAUgB,QAAS,kBAAK,EAAKxB,gBAI7E,6BAASkB,UAAU,mBACf,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,oBACX,yDACA,wBAAIA,UAAU,kBAElB,yBAAKV,GAAG,eACJ,wBAAIA,GAAG,iBACNc,KAAKpB,MAAMG,SAASoB,KAAI,SAACd,EAAGE,GACrB,OACI,wBAAIK,UAAU,QAAQQ,IAAKb,GACvB,0BAAMK,UAAU,MAAMM,QAAS,kBAAI,EAAKZ,aAAaD,EAAGH,MAAMG,EAAGM,WACjE,0BAAMC,UAAU,MAAMM,QAAS,kBAAI,EAAKjB,WAAWI,EAAGH,MAAtD,UACA,0BAAMU,UAAWP,EAAGK,SAAUL,EAAGgB,sB,GA/F3DC,cCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.445bf569.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            inputContent: '',\n            listToDo:[],\n            nextId:1,\n        }\n    }\n    handleChange=(e) =>{\n        this.setState({\n            inputContent: e.target.value\n    })\n    }\n    addItem = () => {\n      let newItem={ \"id\":this.state.nextId,\n                    \"content\":this.state.inputContent,\n                    \"myClass\":\"item\",\n                    \"nbrClick\":1,\n                    \"completed\":\"Complete\"\n                },\n          newList=[...this.state.listToDo,newItem]\n         \n          if (this.state.inputContent!=='')\n                this.setState({\n                nextId: this.state.nextId+1,\n                listToDo:newList,\n                inputContent:'',\n                btnCmpltUndo:\"Complete\"\n            })\n    }\n  deleteItem = (id) =>{\n      const updatedList=this.state.listToDo.filter( (el) => {\n          return el.id!==id\n      })\n      this.setState({\n          listToDo:updatedList\n      })\n  }\n  completeItem = (id)=>{\n      for(let i=0;i<this.state.listToDo.length;i++){\n      if (this.state.listToDo[i].id===id){\n      this.state.listToDo[i].nbrClick=this.state.listToDo[i].nbrClick+1\n      this.setState({\n        listToDo:this.state.listToDo\n      })\n         if (this.state.listToDo[i].nbrClick%2==0){\n            this.state.listToDo[i].myClass=\"item iscompleted\"\n            this.state.listToDo[i].completed=\"Undo\"\n            this.setState({\n              listToDo:this.state.listToDo\n            })\n            } else {\n              this.state.listToDo[i].myClass=\"item\"\n              this.state.listToDo[i].completed=\"Complete\"\n              this.setState({\n                listToDo:this.state.listToDo\n              })\n              }\n      }\n    }\n  }\n    render() {\n \n        return (\n            <div className=\"App\">\n                <section className=\"add-to-do-item\">\n                    <div className=\"add-container\">\n                        <h1>To-Do App!</h1>\n                        <p>Add New To-Do</p>\n                        <div className=\"form-container\">\n                            <input  type=\"text\"\n                                    name=\"add-to-do\"\n                                    id=\"add-to-do-input\"\n                                    placeholder=\"Enter new task\"\n                                    value={this.state.inputContent}\n                                    onChange={(e)=>this.handleChange(e)}\n                            /><br/>\n                            <input type=\"submit\" value=\"Add\" id=\"add-btn\" onClick={()=> this.addItem()}/>\n                        </div>\n                    </div>\n                </section>\n                <section className=\"show-to-do-list\">\n                    <div className=\"show-container\">\n                        <div className=\"heading-division\">\n                            <h2>Let's get some work done!</h2>\n                            <hr className=\"heading-rule\"/>\n                        </div>\n                        <div id=\"to-do-items\">\n                            <ul id=\"my-to-do-List\">\n                            {this.state.listToDo.map((el,i)=>{\n                                    return (\n                                        <li className=\"items\" key={i}>\n                                            <span className=\"btn\" onClick={()=>this.completeItem(el.id)}>{el.completed}</span>\n                                            <span className=\"btn\" onClick={()=>this.deleteItem(el.id)}>Delete</span>\n                                            <span className={el.myClass}>{el.content}</span>\n                                        </li>\n                                    )\n                                    }\n                                )}\n                            </ul>\n                        </div>\n                    </div>\n                </section>\n    </div>\n         );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}